O que precisa ter para instalar o angular no computador:
- node.js
- angular CLI === npm i -g @angular/cli
- instalar o TypeScript === npm i -g typescript

================================================================================================================================================

Comandos:
- ng new nome-do-projeto == cria o novo projeto angular;
- ng serve == roda a aplicação;
- ng g c nome-do-componente == cria um novo componente. O "g" significa gerar, "c" significa componente;
- ng g m nome-do-modulo == cria um novo modulo. O "m" significa módulo;
- ng g s nome-do-servico == cria um novo servico. O "s" significa servico;
- ng g d node-da-diretiva == cria uma nova diretiva. O "d" significa diretiva;
- ng g p node-do-pipe == cria um novo pipe. O "p" significa pipe;
- ng g class node-da-diretiva == cria uma nova class;
- ng g interface node-do-interface == cria uma nova interface;
- ng g enum node-do-enum == cria um novo enum;
- ng build == gera o build de desenvolvimento;
- ng build --prod == gera o build de produção; 

================================================================================================================================================

Componentes:
- há duas formas de criar um componente, via CLI ou sem o CLI.
- sem o CLI:
    - é preciso criar o arquivo.component.ts dentro da pasta de componente;
    - configurar o decorator @Component dentro do componente, colocando selector, template e css;
    - importar classe do componente dentro de um modulo. (module.ts -> @NgModule -> declarations);
    - dentro do arquivo html, colocar a <tag> com o mesmo nome configurado no selector do component;

- com CLI:
    - utilizar o comando ng g c nome-do-componente dentro da pasta onde deseja, assim será criada uma pasta com o arquivo do componente, css, html e de testes, 
    tudo automaticamente;
    - já adiciona o componente dentro do modulo da pasta desejada;

================================================================================================================================================

Comandos especiais:
- ng lint: escanear todo o código, verificar boas práticas do style guides, erros como ponto e vírgula, etc;
- ng test: executa os testes unitários no projeto;
- ng e2e: executa os testes end 2 end no projeto;

================================================================================================================================================

Modulos:
- ajuda a organizar a aplicação, desenvolvendo diretórios para armazenar arquivos relacionados ao módulo.
- o app.module.ts é o módulo raiz da aplicação.
- dentro do módulo utilizasse o decorator @NgModule, nele é declarados alguns metadados, dentre eles o declarations, imports, providers, exports;
    - declarations: listar todos os componentes, diretivas e pipes que serão utilizados no módulo;
    - imports: adiciona outros módulos que serão utilizados dentro do módulo específico ou componentes que utilizam módulos externos ao módulo configurado;
    - providers: declar os serviços que ficarão disponíveis para outros módulos;
    - bootstrap: é declarado apenas no módulo raiz, o app.module;
    - exports: exportar as declarações (componentes, diretivas e pipes) para outros módulos;
    - providers: serviços fornecedores utilizados pelos componentes de dentro do módulo;

- para criar um módulo é só utilizar o comando ng g m node-do-modulo;
- para que seja possível compartilhar esse módulo com o restante da aplicação, é necessário importar ele dentro do módulo principal (app.module.ts) 
dentro do metadado "imports" e, dentro do módulo que quer exportar é necessário colocar o metadado "exports" e colocar o nome do componente dentro.

================================================================================================================================================

Templates: 
- são os arquivos html dentro da pasta do componente
- para passar variáveis de forma dinâmica entre componente e html é necessário criar ela dentro do arquivo do componente (component.ts);
    - no arquivo html, pegar a variável pela interpolação {{ nome da variável declarada no component.ts }}

================================================================================================================================================

Diretivas:
- Diretivas são instruções;
- Diretivas estruturais:
    - Loop:
        - for: *ngFor="let nome-qualquer of nome-da-variavel"
            - Exemplo: <li *ngFor="let curso of cursos">{{curso}}</li>

    - Condição:
        - if: *ngIf=""
            - Exemplo: <p *ngIf="var > 0"></p>

- Diretivas de atributos:
    - Interage com os elementos em que foram aplicadas;
    - ng-class e ng-style;

- ngSwitch, ngSwitchCase e ngSwitchDefault:
    - utilizado no caso de switch and case;
    - Olhar exemplo em diretivas -> diretiva-ngswitch;

================================================================================================================================================

Serviços:
- para criar um serviço é necessário criar um arquivo .service.ts;
- comando para criar: ng g s nome-do-servico;
    - será criado os arquivos nome-do-arquivo.service.spec.ts e nome-do-arquivo.service.ts.
- para chamar um service dentro de um componente é necessário importar o mesmo dentro do arquivo do componente.ts desejado;

Injeção de dependência:
- fazer com que o angular forneça uma instância da classe de serviço, sem precisar instânciar manualmente;
- o decorator @Injectable() fornece essa possibilidade de injetar a classe sem instânciar ela;
- para fazer a injeção é necessário declarar a classe dentro do constructor no componente
    - exemplo: constructor(private primeiroServico: PrimeiroServicoService) == declara a variavel "primeiroServico" do tipo "PrimeiroServicoService", 
    que é a classe importada no arquivo;
    - o "private" guarda o escopo desse acesso da classe dentro do constructor;

================================================================================================================================================

Property Binding e Interpolação
- Data Binding: uma forma de associar informações que estão no componente para o template, e vice e versa. Tipos:
    - Interpolação "{{ valor }}": (componente -> template);
    - Property binding "[propriedade]="valor": (componente -> template);
        - (evento)="handler": (template -> componente);
    - Two way data binding [(ngModel)]="propriedade";

================================================================================================================================================    

Class e style binding:
- é possível criar uma váriavel dentro de um elemento html através da # mais o nome da variável
    - exemplo <select #classe (change)="0">
    - assim fica armazenado dentro da var classe as propriedades do elemento
    - exemplos de class e style binding: projeto data-binding -> app -> data-binding -> data-binding.component.html

================================================================================================================================================

Event binding:
- eventos pré definidos no angular;
- https://developer.mozilla.org/pt-BR/docs/Web/API/Event;
- exemplos em: projeto data-binding -> app -> data-binding -> data-binding.component.html;

================================================================================================================================================

Two-way data binding:
- junta o binding de propriedade e de evento em um lugar só;
- [(ngModel)]="nome" dentro do elemento;
- exemplos em: projeto data-binding -> app -> meu-form -> meu-form.component.html;
- ngModel é uma diretiva do angular que pertence ao "FormsModule", onde precisa ser importado no module

================================================================================================================================================

Input properties:
- é utilizado para passar dados pelo html para outro componente;
- dentro de um componente pai, colocar um componente pelo seu seletor, dentro dele adicionar uma propriedade que tenha o mesmo nome da váriavel 
dentro do componente filho, assim essa variável poderá ser acessada no html do componente filho.
- dentro do componente filho é necessário utilizar o decorator @Input();
    - no decorator é possível colocar o nome da propriedade externa, que é recebida, e o nome da propriedade interna, armazenada em uma variável;
        - exemplo: @Input('nome') nomeCurso: string = '';

- Exemplo: <app-curso [nome]="nomeDoCurso"></app-curso>
    - Esse exemplo está em: data-binding -> app -> data-binding -> data-binding.component.html;
    - o app-curso está em: data-binding -> app -> input-property -> input-property.component.html;

================================================================================================================================================

Output properties:
- é utilizado para exibir os dados para fora do elemento, pelo componente pai;
- Esse exemplo está em: data-binding -> app -> data-binding -> data-binding.component.html;
- o app-curso está em: data-binding -> app -> input-property -> output-property.component.html; 

================================================================================================================================================

Ciclo de vida do componente:
- ngOnChanges: ativado antes do ngOnInit e quando o valor property-binding é atualizado;
- ngOnInit: quando o Component é inicializado;
- ngDoCheck: ativado a cada ciclo de verificação de mudanças;
- ngAfterContentInit: depois de inserir conteúdo externo na view;
- ngAfterContentChecked: a cada verificação de conteúdo inserido;
- ngAfterViewChecked: a cada verificação de conteúdo / conteúdo filho;
- ngOnDestroy: antes da diretiva/component ser destruído;

================================================================================================================================================

Utilizando pré-processadores:
- Sass, Lass, stylus
- é possível gerar um novo projeto já com esses pré processadores instalados:
    - ng new nome-do-projeto --style=sass;
    - ng new nome-do-projeto --style=less;
    - ng new nome-do-projeto --style=stylus;

- ou utilizar já em um projeto existente:
    - ng set defaults.styleExt scss;
    - ng set defaults.styleExt less;
    - ng set defaults.styleExt styl;

================================================================================================================================================

Gerando build de desenvolvimento:
- ng build;
- o build é gerado dentro do diretório dist;
- apresentam 3 arquivos:
    - index.html == index.html limpo;
    - main.bundle.js == possui todo o código fonte da aplicação (css e html);
    - polyfills.bundle.js == código auxiliar ao browser para ler a aplicação;

Gerando build de produção:
- ng build --prod;
- minifica o código js da aplicação;
- css e templates html já minificados e incluídos em main.bundle.js

================================================================================================================================================

Operador Elvis:
- Utilizado para identificar caso seja um valor nulo ou não e exibir na tela
- Exemplo: diretivas -> operador-elvis

================================================================================================================================================

ng-content:
- Utilizado para passar a informação digitada dentro do seletor principal do componente para dentro do html do componente
- Exemplo: diretivas -> exemplo-ng-content.component e diretivas -> app.component.html